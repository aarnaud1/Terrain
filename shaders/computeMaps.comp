/*
 * Copyright (C) 2024 Adrien ARNAUD
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#version 450 core

#include "noise.inl"

layout(local_size_x_id = 0) in;
layout(constant_id = 1) const float randomSeed = 0.0f;

layout(binding = 0) buffer restrict writeonly NoiseMap { float noiseMap[]; };

layout(push_constant) uniform PushConstants
{
    uint sizeX;
    uint sizeY;
    uint octaves;
    float waveLength;
    float offX;
    float offY;
    float theta;
};

void main()
{
    const float cosTheta = cos(-theta);
    const float sinTheta = sin(-theta);

    for(uint idx = gl_GlobalInvocationID.x; idx < sizeX * sizeY;
        idx += gl_WorkGroupSize.x * gl_NumWorkGroups.x)
    {
        const int i = int(idx) / int(sizeX);
        const int j = int(idx) % int(sizeX);

        const float x = float(j - int(sizeX / 2));
        const float y = float(i);
        const float X = cosTheta * x + sinTheta * y + offX;
        const float Y = -sinTheta * x + cosTheta * y + offY;

        float tmp = 0.0f;
        float amp = 1.0f;
        float freq = 1.0f / waveLength;
        for(uint octave = 0; octave < octaves; ++octave)
        {
            const float tmpHeight
                = interpolateNoise(X * freq, (Y + randomSeed) * freq, octave % MAX_PRIME_INDEX);
            tmp += amp * tmpHeight;
            freq *= 2.0f;
            amp *= 0.5f;
        }
        noiseMap[idx] = tmp + 0.3f;
    }
}

/*
layout(local_size_x_id = 0) in;
layout(constant_id = 1) const float heightRandomSeed = 0.0f;
layout(constant_id = 2) const float moistureRandomSeed = 0.0f;
layout(constant_id = 3) const float waterRandomSeed = 0.0f;

layout(binding = 0) buffer restrict writeonly HeightMap { float heightMap[]; };
layout(binding = 1) buffer restrict writeonly MoistureMap { float moistureMap[]; };
layout(binding = 2) buffer restrict writeonly WaterMap { float waterMap[]; };

layout(push_constant) uniform PushConstants
{
    uint sizeX;
    uint sizeY;
    uint heightOctaves;
    uint moistureOctaves;
    uint waterOctaves;
    float heightWaveLength;
    float moistureWaveLength;
    float waterWaveLength;
    float offX;
    float offY;
    float theta;
};

void main()
{
    const float cosTheta = cos(-theta);
    const float sinTheta = sin(-theta);

    for(uint idx = gl_GlobalInvocationID.x; idx < sizeX * sizeY;
        idx += gl_WorkGroupSize.x * gl_NumWorkGroups.x)
    {
        const int i = int(idx) / int(sizeX);
        const int j = int(idx) % int(sizeX);

        const float x = float(j - int(sizeX / 2));
        const float y = float(i);
const float X = cosTheta * x + sinTheta * y + offX;
const float Y = -sinTheta * x + cosTheta * y + offY;

float tmp0 = 0.0f;
float amp0 = 1.0f;
float freq0 = 1.0f / heightWaveLength;
for(uint octave = 0; octave < heightOctaves; ++octave)
{
    const float tmpHeight
        = interpolateNoise(X * freq0, (Y + heightRandomSeed) * freq0, octave % MAX_PRIME_INDEX);
    tmp0 += amp0 * tmpHeight;
    freq0 *= 2.0f;
    amp0 *= 0.5f;
}
heightMap[idx] = tmp0 + 0.3f;

float tmp1 = 0.0f;
float amp1 = 1.0f;
float freq1 = 1.0f / moistureWaveLength;
for(uint octave = 0; octave < moistureOctaves; ++octave)
{
    const float tmpMoisture
        = interpolateNoise(X * freq1, (Y + moistureRandomSeed) * freq1, octave %
MAX_PRIME_INDEX); tmp1 += amp1 * tmpMoisture; freq1 *= 2.0f; amp1 *= 0.5f;
}
moistureMap[idx] = tmp1 + 0.3f;

float tmp2 = 0.0f;
float amp2 = 1.0f;
float freq2 = 1.0f / waterWaveLength;
for(uint octave = 0; octave < waterOctaves; ++octave)
{
    const float tmpHeight
        = interpolateNoise(X * freq1, (Y + moistureRandomSeed) * freq1, octave %
MAX_PRIME_INDEX); tmp1 += amp1 * tmpHeight; freq1 *= 2.0f; amp1 *= 0.5f;
}
waterMap[idx] = tmp1 + 0.3f;
}
}
*/